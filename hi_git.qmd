---
title: "Git and GitHub Fundamentals"
author: "Layla Bouzoubaa"
date: "March 8, 2023"
format:
  revealjs: 
    theme: dark
editor: visual
---

## Hello 👋🏼

👩🏻‍🎓 Doctoral student, IS

💊 NLP, social computing, drugs

⏱️ Passionate about efficiency

🐱 👫🏻 🍷 🍣 🦪 🍵

## Outline

-   Introduce Git

-   Setup Git

-   Git basics with examples

-   Introduce GitHub

-   GitHub basics with examples

-   Examples and code snippets will be presented in Python

## What is Git

-   Git and Github are essential tools for developers

-   Git is a distributed version control system

    ![](R_materials/images/meme1.jpeg){width="337"}

::: notes
Git, a powerful tool from Unix, that enables developers to manage and track changes in their codebase. Github, on the other hand, is a web-based platform that provides a centralized location for storing and managing Git repositories. This lecture will cover the basics of Git and Github, including how to create a repository, make commits, and push changes to a remote repository. We will also cover how to use Github to collaborate with other developers and manage issues and pull requests.
:::

## Why?

![](R_materials/images/withoutGit2.png){fig-align="center" width="382"}

::: notes
But actually, you an review a projects history to find out which changes were made, who made the changes, when were the changes made and why the changes were needed.
+ You end up with dozens or hundreds of versions.
+ What happens when somebody else needs to work on the code at the same time?
:::

## Git Basics Concepts

-   Git is a distributed version control system - repositories

    -   Local v remote

-   Creating a repository with **`git init`**

-   Staging changes with **`git add`**

-   Making commits with **`git commit`**

-   Branching and merging with **`git branch`** and **`git merge`**

::: notes
A Git project - the whole collection of files and folders associated with a projects and their revision history . it contains a hidden .git folder

Another powerful feature of Git is branching and merging. Branches allow you to work on multiple versions of your codebase simultaneously.
:::

## Again

![](R_materials/images/local_remote.png){fig-align="center" width="993"}

## Commits

-   Semi-permanent snapshots of your project 📸

-   They capture the current state of your repository and carry a linked-list relationship

    -   all *commits* are linked

    -   These lists development histories can be organized into *branches* 🎋 (hold this thought)

::: notes
semi-permanent because commits are meant to permanents store changes however they can be deleted but it's a pain in a\*\*.


all .purple\[commits\] are linked so that if you make a mistake, you can travel up the list several commits and revert your project to that state.
:::

## Commits pt. 2 🤿

::: columns
::: {.column width="60%"}
-   Make changes on a *working directory*

-   Changes to *working directory* must be staged before they can be committed

    -   *Staging* tells Git you want to include updates to a file in the next *commit*

    -   *Staging* can be undone and does not affect your repo in any way

    -   Save the contents in the staging area with a COMMIT
:::

::: {.column width="40%"}
![](R_materials/images/staging.png){style="background-color:gray;" fig-align="center"}
:::
:::

## Branching

::: columns
::: {.column width="50%"}
-   Make your changes

-   Take a snapshot of those changes by adding them to the staging area

-   Permanently store those changes to your repo by committing them

-   Store your development in *branches*
:::

::: {.column width="50%"}
![](R_materials/images/branching.png){fig-align="center" width="757"}
:::
:::

## Push

-   When you are ready to share your changes with others PUSH them (and your branch) to the central repository!

-   You can keep pushing new commits (changes) to your branch until you are ready to make your modifications a permanent part of `main`

    -   rule of 👍 #1: a new branch should correspond to a new feature and have a meaningful name

    -   rule of 👍 #2: a commit should reflect a significant modification to your code

    -   rule of 👍 #3: a commit message should be about 50 chars and effectivetly communicate the context of your changes - your future self will thank you 😉

## Set up Git

\--\> Open up your terminals \<\--

Macs come with Git OOTB (or with XCode Tools) however PC users may need to install it: https://git-scm.com/download/win

-   `git –-version` to check

::: columns
::: {.column width="50%"}
![](R_materials/images/iterm.png){width="109"}
:::

::: {.column width="50%"}

![](R_materials/images/warp.png)
:::
:::

## Show Me

*creating a repository, staging changes, making commits, branching*

## GitHub

-   Github is a web-based platform for storing and managing Git repositories (please create an account if you have not already)

-   Creating a repository on Github

-   Pushing local changes to Github with **`git remote add`** and **`git push`**

::: notes
Github is a web-based platform that provides a centralized location for storing and managing Git repositories. To use Github, you first need to create an account. Once you have created an account, you can create a new repository by clicking on the "New Repository" button on your Github homepage.

This command will add a remote repository to your local repository and push your changes to the remote repository.
:::

## GitHub pt. 2

-   Github provides a set of collaboration tools

-   Creating pull requests to propose changes and get feedback

-   Using issue tracking tools to track bugs and feature requests

::: notes
Github provides a powerful set of collaboration tools that allow developers to work together on the same codebase. One of the most common collaboration workflows is using pull requests. Pull requests allow developers to propose changes to a codebase and get feedback from other developers before merging the changes into the main branch.
:::

## Pull Requests (PR)

-   Change branches with `git checkout -b <new_branch_name>`

-   Create the remote branch and push changes with `git push -u origin <new_branch_name>`

-   Create the PR on GitHub in the repository you want to merge into

-   A PR will be reviewed by repository owner/manager

-   Issues are a good tool for tracking bugs and feature requests

::: notes
This command will create a new branch and switch you to it. You can make your changes on this branch and commit them as usual.

To create a pull request, go to the Github repository page and click on the "New Pull Request" button. Select your branch and the branch you want to merge your changes into. Github will show you a comparison of the changes between the two branches. You can then add a title and description for your pull request and submit it for review.

Github also provides a set of issue tracking tools that allow developers to track bugs and feature requests. To create a new issue, click on the "New Issue" button on the Github repository page. You can then add a title and description for the issue and assign it to a specific developer.
:::

## Show Me Again

-   Example Python code demonstrating creating a pull request and creating an issue

## To Conclude

-   Git and Github are essential tools for any developer working on a team

-   This lecture covered the basics of Git and Github

-   Examples and code snippets were presented in Python

## Resources

-   Git Handbook

    -   https://guides.github.com/introduction/git-handbook/

-   Code Refinery

    -   https://coderefinery.github.io/git-intro/

-   Oh Shit Git or Dangit Git

    -   https://ohshitgit.com/

    -   https://dangitgit.com/en
